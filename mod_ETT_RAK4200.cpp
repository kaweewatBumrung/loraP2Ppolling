/*
  mod_ETT_RAK4200.cpp
  for use with loraP2Ppolling
  modify by kaweewat bumrung
  - loraP2P read AT-Command to readStringUntil(10) (/n)
  - add _timeout_2 = 27ms
  date 30/10/2021 (dd/mm/yyyy)

  from rakwireless RAK4200 AT-Command
  https://docs.rakwireless.com/Product-Categories/WisDuo/RAK4270-Module/AT-Command-Manual/
  AT Command 115200 / 8-N-1
  full 255 ASCII characters and than <CR><LF> (/r/n) ASCILL (13,10)
  minimum response of 5 ASCII characters "OK /r/n" -> 'O'+'K'+' '+'/r'+'/n'

  use with hardware from ETT
  http://www.etteam.com/prodIOT/LORA-RAK4200-AS923-MODULE/index.html
  http://www.ett.co.th/prodIOT/cat-LORA-RAK4200.pdf
*/

/*
   A library for controlling RAK4200 LoRa radio.

   @Author Eakachai Makarn(modify from RAK811 from Leopold.wang)
   @Date   2/12/2020

*/

//=================================================================================================
#include "Arduino.h"
#include "mod_ETT_RAK4200.h"
//=================================================================================================

//=================================================================================================
extern "C"
{
#include "string.h"
#include "stdlib.h"
}
//=================================================================================================

//=================================================================================================
String ret = "";
String command = "";
//=================================================================================================

#define _timeout 200
#define _timeout_2 27

/*
  AT Command 115200 / 8-N-1
  full 255 ASCII characters and than <CR><LF> (/r/n) ASCILL (13,10)
  minimum response of 5 ASCII characters "OK /r/n" -> 'O'+'K'+' '+'/r'+'/n'
*/

/*
  @param serial Needs to be an already opened Stream ({Software/Hardware}Serial) to write to and read from.
*/
//=================================================================================================
RAK4200::RAK4200(Stream &serialLora, Stream &serialDebug) : _serialLora(serialLora), _serialDebug(serialDebug)
{
  _serialLora.setTimeout(_timeout);   //2000
  _serialDebug.setTimeout(1000);
}
//=================================================================================================

/*
   Gets the firmware version number of the module.
   Only applies to the firmware that the module programmed for the RAK4200 AT command.
   AT commands refer to: https://downloads.rakwireless.com/en/LoRa/RAK4200/Application_Notes/Get_Start_with_RAK4200_WisNode-LoRa.pdf
*/
//=================================================================================================
// mcu>at+version\r\n
// rak>OK V3.0.0.13.H.T2
//=================================================================================================
String RAK4200::rk_getVersion()
{
  //===============================================================================================
  sendRawCommand(F("at+version"));
  //===============================================================================================
  ret = rk_recvData();
  ret.trim();
  //===============================================================================================
  return ret;
  //===============================================================================================
}
//=================================================================================================

/* STDB
   Get the frequency band of the module.
   This feature request to receive at least 800 bytes buffer size.
*/
//=================================================================================================
// mcu>at+get_config=lora:status\r\n
// rak>OK Work Mode: LoRaWAN
//     Region: EU868
//     Send_interval: 600s
//     Auto send status: false.
//     Join_mode: ABP
//     DevAddr: 260125D7
//     AppsKey: 841986913ACD00BBC2BE2479D70F3228
//     NwksKey: 69AF20AEA26C01B243945A28C9172B42
//     Class: A
//     Joined Network:true
//     IsConfirm: false
//     AdrEnable: true
//     EnableRepeaterSupport: false
//     RX2_CHANNEL_FREQUENCY: 869525000, RX2_CHANNEL_DR:0
//     RX_WINDOW_DURATION: 3000ms
//     RECEIVE_DELAY_1: 1000ms
//     RECEIVE_DELAY_2: 2000ms
//     JOIN_ACCEPT_DELAY_1: 5000ms
//     JOIN_ACCEPT_DELAY_2: 6000ms
//     Current Datarate: 4
//     Primeval Datarate: 4
//     ChannelsTxPower: 0
//     UpLinkCounter: 1
//     DownLinkCounter: 0
//=================================================================================================
String RAK4200::rk_getLoRaStatus()
{
  //===============================================================================================
  sendRawCommand(F("at+get_config=lora:status"));
  //===============================================================================================
  ret = rk_recvData();
  ret.trim();
  //===============================================================================================
  return ret;
  //===============================================================================================
}
//=================================================================================================

/* STDB
   Get the Channels list at current region.
   This feature request to receive at least 800 bytes buffer size if work at Region US915,AU915 or CN470
*/
//=================================================================================================
// mcu>at+get_config=lora:channel\r\n
// rak>OK *0,on,868100000,0,5; *1,on,868300000,0,5; *2,on,868500000,0,5; 3,off,0,0,0;
//     4,off,0,0,0; 5,off,0,0,0; 6,off,0,0,0; 7,off,0,0,0; *8,on,867100000,0,5;
//     *9,on,867300000,0,5; *10,on,867500000,0,5; *11,on,867700000,0,5;
//     *12,on,867900000,0,5; 13,off,0,0,0; 14,off,0,0,0; 15,off,0,0,0
//     With “*0,on,868100000,0,5” as an example，channel parameter analysis:
//     “*” at the beginning if the channel is open;
//     ”0” is the channel ID;
//     ”on” indicates the current status of the channel;
//     “868100000” is the actual frequency of the channel，unit is Hz;
//     “0,5” indicates the DR of the channel, DR0~DR5.
//=================================================================================================
String RAK4200::rk_getChannelList()
{
  //===============================================================================================
  sendRawCommand(F("at+get_config=lora:channel"));
  //===============================================================================================
  ret = rk_recvData();
  ret.trim();
  //===============================================================================================
  return ret;
  //===============================================================================================
}
//=================================================================================================

/*
   Use to change the next send data rate temporary when adr function is off.
   It will not be save to internal flash.
   rate : If your Band is EU868 from 0 to 7.
          If your Band is US915 from 0 to 4.
*/
//=================================================================================================
bool RAK4200::rk_setRate(int rate)
{
  //===============================================================================================
  sendRawCommand("at+set_config=lora:dr:" + (String)rate);
  ret = rk_recvData();
  //===============================================================================================

  //===============================================================================================
  if (ret.indexOf("OK") >= 0)
  {
    return true;
  }
  else
  {
    return false;
  }
  //===============================================================================================
}
//=================================================================================================

/*
   Use to change the LoRaWAN class.
   classMode:0->ClassA,
             1->ClassB,
             2->ClassC
   It will be save to internal flash.
*/
//=================================================================================================
// mcu>at+set_config=lora:class:0\r\n
// rak>OK
//=================================================================================================
bool RAK4200::rk_setClass(int classMode)
{
  //===============================================================================================
  if (classMode > 2)
  {
    //=================================================================================================
#if defined DEBUG_MODE
    _serialDebug.println(F("deb>Parameter error"));                                                 // Debug:Error Code
#endif
    //=================================================================================================
    //=============================================================================================
    return false;
    //=============================================================================================
  }
  //===============================================================================================

  //===============================================================================================
  command = "at+set_config=lora:class:" + (String)classMode;
  sendRawCommand(command);
  ret = rk_recvData();
  //===============================================================================================

  //=================================================================================================
#if defined DEBUG_MODE
  _serialDebug.print("deb>");
  _serialDebug.println(ret);
#endif
  //=================================================================================================

  //===============================================================================================
  if (ret.indexOf("OK") >= 0)
  {
    return true;
  }
  else
  {
    return false;
  }
  //===============================================================================================
}
//=================================================================================================

/*
   Use to change the LoRaWAN region.
   region:0->AS923,
          1->AU915,
          2->CN470,
          3->CN779,
          4->EU433,
          5->EU868,
          6->KR920,
          7->IN865,
          8->US915,
          9->US915_Hybrid,
   It will be save to internal flash.
*/
//=================================================================================================
// mcu>at+set_config=lora:region:EU868\r\n
// rak>OK
//=================================================================================================
bool RAK4200::rk_setRegion(int region)
{
  //===============================================================================================
  if (region > 9)
  {
    //=================================================================================================
#if defined DEBUG_MODE
    _serialDebug.println(F("deb>Parameter error"));                                                 // Debug:Error Code
#endif
    //=================================================================================================
    //=============================================================================================
    return false;
    //=============================================================================================
  }
  //===============================================================================================

  //===============================================================================================
  String REGION;
  //===============================================================================================
  switch (region)
  {
    case 0:
      REGION = "AS923";
      break;

    case 1:
      REGION = "AU915";
      break;

    case 2:
      REGION = "CN470";
      break;

    case 3:
      REGION = "CN779";
      break;

    case 4:
      REGION = "EU433";
      break;

    case 5:
      REGION = "EU868";
      break;

    case 6:
      REGION = "KR920";
      break;

    case 7:
      REGION = "IN865";
      break;

    case 8:
      REGION = "US915";
      break;

    case 9:
      REGION = "US915_Hybrid";
      break;
  }
  //===============================================================================================

  //=================================================================================================
#if defined DEBUG_MODE
  _serialDebug.print("deb>");
  _serialDebug.println("Current work region: " + REGION);
#endif
  //=================================================================================================

  //===============================================================================================
  sendRawCommand("at+set_config=lora:region:" + REGION);
  ret = rk_recvData();
  //===============================================================================================

  //=================================================================================================
#if defined DEBUG_MODE
  _serialDebug.print("deb>");
  _serialDebug.println(ret);
#endif
  //=================================================================================================

  //===============================================================================================
  if (ret.indexOf("OK") >= 0)
  {
    return true;
  }
  else
  {
    return false;
  }
  //===============================================================================================
}
//=================================================================================================

/*
   Let the module enter the ultra low power sleep mode.
   When the module is in sleep mode, the host can send any character to wake it up.
   mode :0->wakeup, 1-> sleep
   When the module is awakened, the event response will automatically return through the serial information.
*/
//=================================================================================================
bool RAK4200::rk_sleep(int mode)
{
  //===============================================================================================
  switch (mode)
  {
    case 0:
      //===========================================================================================
      sendRawCommand(F("at+set_config=device:sleep:0"));
      ret = rk_recvData();                                                                        // OK Wake Up
      //===========================================================================================
      if (ret.indexOf("OK Wake Up") >= 0)
      {
        return true;
      }
      else
      {
        return false;
      }
      //===========================================================================================
      break;

    case 1:
      //===========================================================================================
      sendRawCommand(F("at+set_config=device:sleep:1"));
      ret = rk_recvData();                                                                        // OK Sleep
      //===========================================================================================
      if (ret.indexOf("OK Sleep") >= 0)
      {
        return true;
      }
      else
      {
        return false;
      }
      //===========================================================================================
      break;

    default:
      //=================================================================================================
#if defined DEBUG_MODE
      _serialDebug.println(F("deb>Parameter(sleep) error"));                                          // Debug:Error Code
#endif
      //=================================================================================================
      //===========================================================================================
      return false;
      //===========================================================================================
      break;
  }
  //===============================================================================================
  //===============================================================================================
  return false;
  //===============================================================================================
}
//=================================================================================================

/*
   This command is used to set the interval time of sending data.
   This feature can't use on RAK4200,manually close the feature before user APP.
*/
//=================================================================================================

//=================================================================================================
bool RAK4200::rk_setSendinterval(int value)
{
  //===============================================================================================
  //if(mode > 2)
  //{
  //=================================================================================================
  //#if defined DEBUG_MODE
  //  _serialDebug.println(F("deb>The mode set Error,the mode is '0','1' or '2'."));                  // Debug:Error Code
  //#endif
  ///=================================================================================================
  //    //=============================================================================================
  //    return false;
  //    //=============================================================================================
  //  }
  //===============================================================================================

  //===============================================================================================
  //sendRawCommand("at+set_config=lora:send_interval:" + (String)mode + ":" + (String)value);
  sendRawCommand("at+set_config=lora:dutycycle_enable:" + (String)value);
  ret = rk_recvData();
  //===============================================================================================
  if (ret.indexOf("OK") >= 0)
  {
    return true;
  }
  else
  {
    return false;
  }
  //===============================================================================================
}
//=================================================================================================

/*
   Reset the module.
*/
//=================================================================================================
// mcu>at+set_config=device:restart\r\n
// rak>UART1 work mode: RUI_UART_NORAMAL
//     Current work_mode:LoRaWAN, join_mode:ABP, Class: A
//     Initialization OK
//=================================================================================================
// mcu>at+set_config=device:restart\r\n
// rak>UART1 work mode: RUI_UART_NORAMAL
//     Current work_mode:LoRaWAN, join_mode:ABP, Class: A
//     Initialization OK
//=================================================================================================
bool RAK4200::rk_reset(void)
{
  //===============================================================================================
  sendRawCommand(F("at+set_config=device:restart"));
  ret = rk_recvData();
  //===============================================================================================
  if (ret.indexOf("Initialization OK") >= 0)
  {
    return true;
  }
  else
  {
    return false;
  }
  //===============================================================================================
}
//=================================================================================================

/*
   Set the module work mode, the module defaults to LoRaWAN mode..
   mode  = 0: Set the module to LoRaWAN mode.
   mode  = 1: Set the module to LoRaP2P mode.
   This command could cause modual reset,so this function must only be executed once
*/
//=================================================================================================
// mcu>at+set_config=lora:work_mode:1\r\n
// rak>UART1 work mode: RUI_UART_NORAMAL
//     Current work_mode:P2P
//     Initialization OK
//=================================================================================================
bool RAK4200::rk_setWorkingMode(int mode)
{
  //===============================================================================================
  switch (mode)
  {
    case 0:
      sendRawCommand(F("at+set_config=lora:work_mode:0"));                                        // Set LoRaWAN Mode.
      break;

    case 1:
      sendRawCommand(F("at+set_config=lora:work_mode:1"));                                        // Set LoRaP2P Mode.
      break;

    default:
      return false;
  }
  //===============================================================================================

  //===============================================================================================
  for (int i = 0; i < 10; i++)
  {
    //=============================================================================================
    ret = rk_recvData();
    //=============================================================================================
    if ((ret.indexOf("Initialization OK") >= 0) || (ret.indexOf("No switch work_mode") >= 0))
    {
      return true;
    }
    //=============================================================================================
  }
  //===============================================================================================

  //===============================================================================================
  return false;
  //===============================================================================================
}
//=================================================================================================

/*
   Set the activation mode to join the network.And join the network.
   mode  = 0: join a network using over the air activation..
   mode  = 1: join a network using personalization.
   Before using this command, you must call one of the rk_initOTAA or rk_initABP functions
*/
//=================================================================================================
// mcu>at+set_config=lora:join_mode:1\r\n
// rak>OK
//=================================================================================================
bool RAK4200::rk_setJoinMode(int mode)
{
  //===============================================================================================
  switch (mode)
  {
    case 0:
      sendRawCommand(F("at+set_config=lora:join_mode:0")); //join Network through OTAA mode.
      break;

    case 1:
      sendRawCommand(F("at+set_config=lora:join_mode:1")); //join Network through ABP mode.
      break;

    default:
      return false;
  }
  //===============================================================================================

  //===============================================================================================
  ret = rk_recvData();
  //===============================================================================================
  if (ret.indexOf("OK") >= 0)
  {
    return true;
  }
  else
  {
    return false;
  }
  //===============================================================================================
}
//=================================================================================================

/*
   Join the network.
   timeout: timeout value (unit:s)
   Before using this command, you must call one of the rk_setJoinMode functions
*/
//=================================================================================================
// mcu>at+join\r\n
// rak>OK Join Success
//=================================================================================================
bool RAK4200::rk_joinLoRaNetwork(int timeout)
{
  //===============================================================================================
  String command = "at+join";
  sendRawCommand(command);
  ret = rk_recvData();
  //===============================================================================================
  //===============================================================================================
  if (ret != NULL)
  {
    if (ret.indexOf("OK Join Success") >= 0)
    {
      return true;
    }
    else if (ret.indexOf("ERROR") >= 0)
    {
      return false;
    }
  }
  //===============================================================================================

  //===============================================================================================
  for (int i = 0; i <= timeout / 2; i++)
  {
    //=============================================================================================
    ret = rk_recvData();
    //=============================================================================================
    if (ret != NULL)
    {
      //=================================================================================================
#if defined DEBUG_MODE
      _serialDebug.print("<- " + ret);
#endif
      //=================================================================================================
      //===========================================================================================
      if (ret.indexOf("OK Join Success") >= 0)
      {
        return true;
      }
      //===========================================================================================
    }
    //=============================================================================================
  }
  //===============================================================================================

  //===============================================================================================
  return false;
  //===============================================================================================
}
//=================================================================================================

/*
   Initialize the module parameter, which is the parameter that the module must use when adding the OTAA to the network.
   devEUI : Device EUI as a HEX string. Example "60C5A8FFFE000001"
   appEUI : Application EUI as a HEX string. Example "70B3D57EF00047C0"
   appKEY : Application key as a HEX string. Example "5D833B4696D5E01E2F8DC880E30BA5FE"
*/
//=================================================================================================
// mcu>at+set_config=lora:dev_eui:3530353064377716\r\n
// rak>OK
//=================================================================================================
// mcu>at+set_config=lora:app_eui:0000000000000001\r\n
// rak>OK
//=================================================================================================
// mcu>at+set_config=lora:app_key:841986913ACD00BBC2BE2479D70F3228\r\n
// rak>OK
//=================================================================================================
bool RAK4200::rk_initOTAA(String devEUI, String appEUI, String appKEY)
{
  if (devEUI.length() == 16)
  {
    _devEUI = devEUI;
  }
  else
  {
    //=================================================================================================
#if defined DEBUG_MODE
    _serialDebug.println(F("deb>The parameter devEUI is set incorrectly!"));                        // Debug:Error Code
#endif
    //=================================================================================================
    //=============================================================================================
    //=============================================================================================
  }
  //===============================================================================================

  //===============================================================================================
  if (appEUI.length() == 16)
  {
    _appEUI = appEUI;
  }
  else
  {
    //=================================================================================================
#if defined DEBUG_MODE
    _serialDebug.println(F("deb>The parameter appEUI is set incorrectly!"));                        // Debug:Error Code
#endif
    //=================================================================================================
    //=============================================================================================
    //=============================================================================================
  }
  //===============================================================================================

  //===============================================================================================
  if (appKEY.length() == 32)
  {
    _appKEY = appKEY;
  }
  else
  {
    //=================================================================================================
#if defined DEBUG_MODE
    _serialDebug.println(F("deb>The parameter appKEY is set incorrectly!"));                        // Debug:Error Code
#endif
    //=================================================================================================
    //=============================================================================================
    //=============================================================================================
  }
  //===============================================================================================

  //===============================================================================================
  command = "at+set_config=lora:dev_eui:" + _devEUI;
  sendRawCommand(command);
  ret = rk_recvData();
  //===============================================================================================
  //===============================================================================================
  if (ret.indexOf("OK") >= 0)
  {
    //=============================================================================================
    command = "at+set_config=lora:app_eui:" + _appEUI;
    sendRawCommand(command);
    ret = rk_recvData();
    //=============================================================================================
    //=============================================================================================
    if (ret.indexOf("OK") >= 0)
    {
      //===========================================================================================
      command = "at+set_config=lora:app_key:" + _appKEY;
      sendRawCommand(command);
      ret = rk_recvData();
      //===========================================================================================
      //===========================================================================================
      if (ret.indexOf("OK") >= 0)
      {
        return true;
      }
      //===========================================================================================
    }
    //=============================================================================================
  }
  //===============================================================================================

  //===============================================================================================
  return false;
  //===============================================================================================
}
//=================================================================================================

/*
   Initialize the module parameter, which is the parameter that the module must use when adding the ABP to the network.
   devADDR : The device address as a HEX string. Example "00112233"
   nwksKEY : Network Session Key as a HEX string. Example "3432567afde4525e7890cfea234a5821"
   appsKEY : Application Session Key as a HEX string. Example "a48adfc393a0de458319236537a11d90"
*/
//=================================================================================================
// mcu>at+set_config=lora:dev_addr:260125D7\r\n
// rak>OK
//=================================================================================================
// mcu>at+set_config=lora:nwks_key:69AF20AEA26C01B243945A28C9172B42\r\n
// rak>OK
//=================================================================================================
// mcu>at+set_config=lora:apps_key:841986913ACD00BBC2BE2479D70F3228\r\n
// rak>OK
//=================================================================================================
bool RAK4200::rk_initABP(String devADDR, String nwksKEY, String appsKEY)
{
  //===============================================================================================
  if (devADDR.length() == 8)
  {
    _devADDR = devADDR;
  }
  else
  {
    //=================================================================================================
#if defined DEBUG_MODE
    _serialDebug.println(F("deb>The parameter devADDR is set incorrectly!"));                       // Debug:Error Code
#endif
    //=================================================================================================
    //=============================================================================================
    //=============================================================================================
  }
  //===============================================================================================

  //===============================================================================================
  if (nwksKEY.length() == 32)
  {
    _nwksKEY = nwksKEY;
  }
  else
  {
    //=================================================================================================
#if defined DEBUG_MODE
    _serialDebug.println(F("deb>The parameter nwksKEY is set incorrectly!"));                       // Debug:Error Code
#endif
    //=================================================================================================
    //=============================================================================================
    //=============================================================================================
  }
  //===============================================================================================

  //===============================================================================================
  if (appsKEY.length() == 32)
  {
    _appsKEY = appsKEY;
  }
  else
  {
    //=================================================================================================
#if defined DEBUG_MODE
    _serialDebug.println(F("deb>The parameter appsKEY is set incorrectly!"));                       // Debug:Error Code
#endif
    //=================================================================================================
    //=============================================================================================
    //=============================================================================================
  }
  //===============================================================================================

  //===============================================================================================
  command = "at+set_config=lora:dev_addr:" + _devADDR;
  sendRawCommand(command);
  ret = rk_recvData();
  //===============================================================================================
  //===============================================================================================
  if (ret.indexOf("OK") >= 0)
  {
    //=============================================================================================
    command = "at+set_config=lora:nwks_key:" + _nwksKEY;
    sendRawCommand(command);
    ret = rk_recvData();
    //=============================================================================================
    if (ret.indexOf("OK") >= 0)
    {
      //===========================================================================================
      command = "at+set_config=lora:apps_key:" + _appsKEY;
      sendRawCommand(command);
      ret = rk_recvData();
      //===========================================================================================
      if (ret.indexOf("OK") >= 0)
      {
        return true;
      }
      //===========================================================================================
    }
  }
  //===============================================================================================
  return false;
  //===============================================================================================
}
//=================================================================================================

/*
   LoRa data send package type.
   type : 0->unconfirm, 1->confirm
   This function can only be used in module work in LoRaWAN mode.
*/
//=================================================================================================
// mcu>at+set_config=lora:confirm:0\r\n
// rak>OK
//=================================================================================================
bool RAK4200::rk_isConfirm(int type)
{
  //===============================================================================================
  switch (type)
  {
    case 0:
      sendRawCommand(F("at+set_config=lora:confirm:0"));                                          // LoRa data send with unconfirm.
      break;

    case 1:
      sendRawCommand(F("at+set_config=lora:confirm:1"));                                          // LoRa data send with confirm.
      break;

    default:
      return false;
  }
  //===============================================================================================

  //===============================================================================================
  ret = rk_recvData();
  //===============================================================================================
  if (ret.indexOf("OK") >= 0)
  {
    return true;
  }
  else
  {
    return false;
  }
  //===============================================================================================
}
//=================================================================================================

/*
   After joining the network, send the packet at the specified application port.
   port : The port number.(1-223)
   datahex : hex value(no space). max 64 byte.
   This function can only be used in module work in LoRaWAN mode.
*/
//=================================================================================================
// mcu>at+send=lora:1:5A00\r\n
// rak>OK
//=================================================================================================
// at+send=lora:1:5A00\r\n
// OK
// at+recv=0,-105,-12,0
//=================================================================================================
bool RAK4200::rk_sendData(int port, char *datahex)
{
  //===============================================================================================
  command = "at+send=lora:" + (String)port + ":" + datahex;
  //===============================================================================================
  sendRawCommand(command);
  //===============================================================================================
  //===============================================================================================
  //ret = rk_recvData();
  //===============================================================================================
  //if(ret.indexOf("OK") >= 0)
  //{
  // / return true;
  //}
  //else
  //{
  //  return false;
  //}
  return true;
  //===============================================================================================
}
//=================================================================================================

/*
   Returns the data or event information received by the module.

*/
//=================================================================================================
String RAK4200::rk_recvData(void)
{
  //===============================================================================================
  _serialLora.setTimeout(_timeout);  //2000
  ret = _serialLora.readStringUntil(10); //RAK4200 end with ASCII:10 LINE FEED   //original ('/0')
  //===============================================================================================

  //=================================================================================================
#if defined DEBUG_MODE
  //Serial.println("millis : " + (String)millis());
  _serialDebug.print(F("rak>"));
  _serialDebug.println(ret);
#endif
  //=================================================================================================

  //===============================================================================================
  return ret;
  //===============================================================================================
}
//=================================================================================================

/*
   Initialize the required parameters in LoRaP2P mode.
   You must first switch the module operating mode to LoRaP2P mode
   FREQ : frequency, default 860000000 range: (860000000 ~1020000000)
   SF : spread factor, default 7 ( 6-10) more low more fast datarate
   BW : Band-with, default 0 ( 0:125KHz, 1:250KHz, 2:500KHz)
   CR : coding Rate, default 1 (1:4/5, 2:4/6, 3:4/7, 4:4/8)
   PRlen : Preamlen, default 8 (8-65535)
   PWR : Tx power, default 14 (5-20)
   User can use this command to build their point to point communication or RFtest command. It will save to flash.
*/
//=================================================================================================
bool RAK4200::rk_initP2P(String FREQ, int SF, int BW, int CR, int PRlen, int PWR)
{
  //===============================================================================================
  command = "at+set_config=lorap2p:" + FREQ + ":" + SF + ":" + BW + ":" + CR + ":" + PRlen + ":" + PWR;
  //===============================================================================================
  sendRawCommand(command);
  ret = rk_recvP2PData();
  //===============================================================================================
  if (ret.indexOf("OK") >= 0)
  {
    return true;
  }
  else
  {
    return false;
  }
  //===============================================================================================
}
//=================================================================================================

//=================================================================================================
//=================================================================================================
bool RAK4200::rk_initP2P_mode(int mode)
{
  //===============================================================================================
  switch (mode)
  {
    case P2P_RECEIVER:
      sendRawCommand(F("at+set_config=lorap2p:transfer_mode:1"));                                 // Set P2P = Receiver Mode.
      break;

    case P2P_SENDER:
      sendRawCommand(F("at+set_config=lorap2p:transfer_mode:2"));                                 // Set P2P = Sender Mode.
      break;

    default:
      return false;
  }
  //===============================================================================================

  //===============================================================================================
  for (int i = 0; i < 10; i++)
  {
    //=============================================================================================
    ret = rk_recvData();
    //=============================================================================================
    if (ret.indexOf("OK") >= 0)
    {
      return true;
    }
    //=============================================================================================
  }
  //===============================================================================================

  //===============================================================================================
  return false;
  //===============================================================================================
}
//=================================================================================================


/*
   Set LoRaP2P Rx continues,module will receive packets with rfconfig until receive the rk_stopRecvP2PData command or rk_reset.
*/
//=================================================================================================
String RAK4200::rk_recvP2PData(void)
{
  //===============================================================================================
  _serialLora.setTimeout(_timeout_2); // 256 char at 115200 (test value)
  ret = _serialLora.readStringUntil(10); //RAK4200 end with ASCII:10 LINE FEED   //original ('/0')
  ret.trim();
  _serialLora.setTimeout(_timeout);

#if defined DEBUG_MODE
  //_serialDebug.println("millis : " + (String)millis());
#endif

  //===============================================================================================
  return ret;
  //===============================================================================================
}
//=================================================================================================

/*
   This function is used to LoRaP2P send data
   datahex : hex value ( no space) .
*/
//=================================================================================================
bool RAK4200::rk_sendP2PData(char *datahex)
{
  //===============================================================================================
  String DATAHEX = datahex;
  String command = "at+send=lorap2p:" + DATAHEX;

#if defined DEBUG_MODE
  //_serialDebug.print(F("rak_tosend>"));
  //_serialDebug.println(DATAHEX);
#endif
  //===============================================================================================
  sendRawCommand(command);
  for (int i = 0; i < 10; i++)
  {
    //=============================================================================================
    ret = rk_recvData();
    //=============================================================================================
    if (ret.indexOf("OK") >= 0)
    {
      //_serialDebug.println((String)millis() + "< end, i : " + (String)i);
      return true;
    }
    //=============================================================================================
  }
  //===============================================================================================
  return true;
  //===============================================================================================
}
//=================================================================================================

/*STDB
   Check the device statistics.
*/
//=================================================================================================
String RAK4200::rk_checkDeviceStatus(void)
{
  //===============================================================================================
  sendRawCommand(F("at+get_config=device:status"));
  ret = rk_recvP2PData();
  //===============================================================================================
  return ret;
  //===============================================================================================
}
//=================================================================================================

/*STDB
   Set the module serial port parameters.Module restart effective
   UartPort :UART Port number
   Band : Serial baud rate.Supports baud rate: 9600  19200  38400  57600  115200  230400  460800  921600.
*/
//=================================================================================================
bool RAK4200::rk_setUARTConfig(int UartPort, int Baud)
{
  //===============================================================================================
  command = "at+set_config=device:uart:" + (String)UartPort + ":" + (String)Baud;
  //===============================================================================================
  sendRawCommand(command);
  //===============================================================================================
  return true;
  //===============================================================================================
}
//=================================================================================================

/*
   Send a raw command to the RAK4200 module.
   //Returns the raw string as received back from the RAK4200.
   Return true,send OK
   If the RAK4200 replies with multiple line, only the first line will be returned.
*/
//=================================================================================================
bool RAK4200::sendRawCommand(String cmd)
{
  //===============================================================================================
  while (_serialLora.available()) // ?
  {
    _serialLora.read();
  }
  //===============================================================================================

  //=================================================================================================
#if defined DEBUG_MODE
  //_serialDebug.println("millis : " + (String)millis());
  _serialDebug.print(F("mcu>"));
  _serialDebug.println(cmd);
#endif
  //=================================================================================================

  //===============================================================================================
  _serialLora.println(cmd);

  //===============================================================================================
  uint32_t TS = millis();
  //_serialDebug.println("Start : " + (String)millis());

  int SA = _serialLora.available();
  while ((millis() - TS) < _timeout) {  // 200ms
    SA = _serialLora.available();
    //_serialDebug.println("SA : " + (String)SA);
    if (SA >= 5) {  // minimum a string of "Ok \r\n" -> 5 char
      //_serialDebug.println("End : " + (String)millis());
      return true;
    }
  }

  //  delay(200);
  //===============================================================================================
  return true;
  //===============================================================================================
}
//=================================================================================================